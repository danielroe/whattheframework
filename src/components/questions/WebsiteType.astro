---
import { WebsiteType } from "../../data/types";
const types = Object.values(WebsiteType).map((value) => value);

const supportingInfo: any = {
  [WebsiteType.Static]: {
    heading: "Static site",
    details: "A content-based website that provides the same content and experience on every visit.",
    examples: ["blog", "marketing site", "documentation"],
  },
  [WebsiteType.Hybrid]: {
    heading: "Flexible site",
    details:
      "A website that may have some static pages, but may also need to cater for unique content on visits to certain pages.",
    examples: ["ecommerce", "news", "learning platforms", "bulletin boards"],
  },
  [WebsiteType.Dynamic]: {
    heading: "Dynamic site",
    details: "A website that can provide different content and experiences on each page view.",
    examples: ["social media", "forum", "video streaming service"],
  },
};

// Static - the majority of users interact with pre-built pages/ files.

// Flexible - the user interactions are split between unchanging pages and pages that change with user actions

// Dynamic - the majority of users interact with pages that change frequently, often in reaction to the users doing something.
---

<style>
  .choice {
    border: 1px solid green;
    margin-bottom: 1rem;
    display: block;
  }

  .examples {
    display: flex;
    flex-direction: row;
    gap: 0.5rem;
  }
</style>

<h2>What type of website are you building?</h2>
{
  types.map((type) => (
    <div class="choice">
      <a href={type.toLowerCase()}>
        <h3>{supportingInfo[type].heading}</h3>
      </a>
      <p>{supportingInfo[type].details}</p>
      <div class="examples">
        <span>Examples??</span>
        {supportingInfo[type].examples.map((example: string) => (
          <span>{example}</span>
        ))}
      </div>
    </div>
  ))
}
<h2>Read more here about how we're defining things...</h2>
<p>How it's deployed............. basically do you need SSG, SSR, or a MIX</p>
